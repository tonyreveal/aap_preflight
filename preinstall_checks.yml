---
- name: AAP Install pre-flight checks
  hosts: all
  gather_facts: false
  pre_tasks:
    - name: Include vars
      ansible.builtin.include_vars:
        file: vars/check_vars.yml
  tasks:
    - name: Pre-flight tasks for all hosts in inventory
      become: true
      block:
        - name: Install nc for connectivity tests before disabling repos
          ansible.builtin.dnf:
            name: "{{ install_pkgs }}"
            state: 'present'
          when:
            - inventory_hostname in groups['automationcontroller']
            - inventory_hostname in groups['automationhub']
            - inventory_hostname in groups['automationedacontroller']

        - name: Make sure repos are disabled
          redhat.rhel_system_roles.rhsm_repository:
            name: "{{ disable_repos }}"
        
        - name: Make sure the Base OS repo is enabled
          redhat.rhel_system_roles.rhsm_repository:
            name: "{{ enable_repos }}"

        - name: Get service facts
          ansible.builtin.service_facts:

        - name: Stop and disable the chef-client if present
          ansible.builtin.service:
            name: chef-client
            state: stopped
            enabled: false
          when: 'chef-client' in services
    
    - name: Validate pg_* vars
      when: groups['database'] | length > 0
      block: 
        - name: Check that all Controller database vars have values
          ansible.builtin.assert:
            that:
              - pg_host is defined and pg_host | length
              - pg_port is defined and pg_port | length
              - pg_database is defined and pg_database | length
              - pg_username is defined and pg_username | length
              - pg_password is defined and pg_password | length
              - pg_sslmode is defined and pg_sslmode | length
          when: groups['automationcontroller'] | length > 0
      
      rescue:
        - name: Set var for user notification of pg_ vars
          ansible.builtin.set_fact:
            check_pg_vars: >-
              "One or more pg_* variables did not have a value.
              Please make sure all of the pg_* variables have values and are properly quoted."

        - name: Clear host errors
          ansible.builtin.meta: clear_host_errors

    - name: Validate automationhub_pg_ vars
      when: groups['database'] | length > 0
      block: 
        - name: Check that all Automation Hub database vars have values
          ansible.builtin.assert:
            that:
              - automationhub_pg_host is defined and automationhub_pg_host | length
              - automationhub_pg_port is defined and automationhub_pg_port | length
              - automationhub_pg_database is defined and automationhub_pg_database | length
              - automationhub_pg_username is defined and automationhub_pg_username | length
              - automationhub_pg_password is defined and automationhub_pg_password | length
              - automationhub_pg_sslmode is defined and automationhub_pg_sslmode | length
          when: groups['automationhub'] | length > 0

      rescue:
        - name: Set var for user notification of automationhub_pg_ vars
          ansible.builtin.set_fact:
            ah_check_pg_vars: >-
              "One or more of the automationhub_pg_* variables did not have a value.
              Please make sure all of the automationhub_pg_* variables have values and are properly quoted."

        - name: Clear host errors
          ansible.builtin.meta: clear_host_errors

    - name: Validate automationedacontroller_pg_* vars
      when: groups['database'] | length > 0
      block: 
        - name: Check that all EDA Controller database vars have values
          ansible.builtin.assert:
            that:
              - automationedacontroller_pg_host is defined and automationedacontroller_pg_host | length
              - automationedacontroller_pg_port is defined and automationedacontroller_pg_port | length
              - automationedacontroller_pg_database is defined and automationedacontroller_pg_database | length
              - automationedacontroller_pg_username is defined and automationedacontroller_pg_username | length
              - automationedacontroller_pg_password is defined and automationedacontroller_pg_password | length
              - automationedacontroller_pg_sslmode is defined and automationedacontroller_pg_sslmode | length
            when: groups['automationedacontroller'] | length > 0
      
      rescue:
        - name: Set var for user notification of automationedacontroller_pg_ vars
          ansible.builtin.set_fact:
            eda_check_pg_vars: >-
              "One or more of the automationedacontroller_pg_* variables did not have a value.
              Please make sure all of the automationedacontroller_pg_* variables have values and are properly quoted."

        - name: Clear host errors
          ansible.builtin.meta: clear_host_errors

    - name: Perform non-aap installer managed database connectivity tests
      when: groups['database'] | length == 0
      block: 
        - name: Automation Controller Database Tests
          when: inventory_hostname in groups['automationcontroller']
          block:
            - name: Verify Contoller connectivity to AAP DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ pg_host }} {{ pg_port }}"
              register: aap_db_connection
              ignore_errors: true
    
            - name: Display Controller connection result
              ansible.builtin.debug:
                var: aap_db_connection['stderr']
    
            - name: Verify AAP database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ pg_database }}"
                login_host: "{{ pg_host }}"
                login_user: "{{ pg_username }}"
                login_password: "{{ pg_password }}"
                port: "{{ pg_port }}"
                ssl_mode: "{{ pg_sslmode }}"
              register: aap_pgsql_test
              ignore_errors: true
    
            - name: Display Controller db credential test results
              ansible.builtin.debug:
                var: aap_pgsql_test

        - name: Automation Hub database Tests
          when: inventory_hostname in groups['automationhub']
          block:
            - name: Verify Hub connectivity to Hub DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ automationhub_pg_host }} {{ automationhub_pg_port }}"
              register: hub_db_connection
              ignore_errors: true
    
            - name: Display HUB connection result
              ansible.builtin.debug:
                var: hub_db_connection['stderr']
    
            - name: Verify HUB database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ automationhub_pg_database }}"
                login_host: "{{ automationhub_pg_host }}"
                login_user: "{{ automationhub_pg_username }}"
                login_password: "{{ automationhub_pg_password }}"
                port: "{{ automationhub_pg_port }}"
                ssl_mode: "{{ automationhub_pg_sslmode }}"
              register: hub_pgsql_test
              ignore_errors: true
    
            - name: Display HUB db credential test results
              ansible.builtin.debug:
                var: hub_pgsql_test

            - name: Make sure the hstore extension is enabled for Automation Hub
              community.postgresql.postgresql_ext:
                name: 'hstore'
                db: "{{ automationhub_pg_host }}"
                login_host: "{{ automationhub_pg_host }}"
                login_user: "{{ automationhub_pg_username }}"
                login_password: "{{ automationhub_pg_password }}"
                port: "{{ automationhub_pg_port }}"
                ssl_mode: "{{ automationhub_pg_sslmode }}"
                state: 'present'
                register: hstore_install
                ignore_errors: true
                # enabling hstore requires postgresql-contrib to be installed
                # on the database server.  if it's not installed this task will fail.
                # We want to ignore the failure and continue with the remainder of the tests.
                # Since it's not an AAP installation managed database we cannot install
                # the required package.

        - name: EDA Controller Database Tests
          when: inventory_hostname in groups['automationedacontroller']
          block:
            - name: Verify EDA connectivity to EDA DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ automationedacontroller_pg_host }} {{ automationedacontroller_pg_port }}"
              register: eda_db_connection
              ignore_errors: true
    
            - name: Verify EDA database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ automationedacontroller_pg_database }}"
                login_host: "{{ automationedacontroller_pg_host }}"
                login_user: "{{ automationedacontroller_pg_username }}"
                login_password: "{{ automationedacontroller_pg_password }}"
                port: "{{ automationedacontroller_pg_port }}"
                ssl_mode: "{{ automationedacontroller_pg_sslmode }}"
              register: eda_pgsql_test
              ignore_errors: true
    
            - name: Display EDA db credential test results
              ansible.builtin.debug:
                var: eda_pgsql_test

    - name: Additional Automation Hub tests
      when: inventory_hostname in groups['automationhub']
      block:
        - name: Check number of Automation Hub nodes in inventory
          ansible.builtin.set_fact:
            hub_clustered: >-
              {{ true if groups['automationhub'] | length > 1
                else
                false
              }}
        
        - name: Perform clustered Automation Hub tasks
          when: hub_clustered
          block:
            - name: Gather facts about Automation Hub servers
              ansible.builtin.setup:
            
            - name: Check for shared mount on clustered Automation Hub
              ansible.builtin.set_fact:
                nfsmount_set: >-
                  {{ true if ansible_mounts | selectattr('mount', 'defined') |
                    selectattr('fstype', 'equalto', 'nfs') |
                    selectattr('mount', 'equalto', '/var/lib/pulp') | length == 1
                    else
                    false
                  }}

   - name: Display Controller test results
      when:
        - inventory_hostname in groups['automationcontroller']
      block:
        - name: Display AAP installed db test results
          when: groups['database'] | lenght > 0
          ansible.builtin.debug:
            msg: >-
              {{ check_pg_vars if check_pg_vars is defined
                else
                "All vars were set properly"
          run_once: true
        
        - name: Display Non-AAP installed db test results
          when: groups['database'] | lenght > 0
          ansible.builtin.debug:
            msg: >-
              {{ check_pg_vars if check_pg_vars is defined
                else
                "All pg_ vars were set properly"
          run_once: true

    - name: Display Automation Hub test results
      when:
        - inventory_hostname in groups['automationhub']
      block:
        - name: Display Standalone Automation Hub test results
          when:
            - groups['automationhub'] | length == 1
          block:
            - name: Display AAP installed PAH db test results
              when: groups['database'] | lenght > 0
              ansible.builtin.debug:
                msg: >-
                  {{ ah_check_pg_vars if ah_check_pg_vars is defined
                    else
                    "All automationhub_pg_ vars were set properly"
              run_once: true
            
            - name: Display Non-AAP installed / Self-Managed db test results
              when: groups['database'] | lenght > 0
              ansible.builtin.debug:
                var: hub_db_connection['stderr']

        - name: Display Clustered Automation Hub test results
          when:
            - groups['automationhub'] | length > 1
          block:          
            - name: /var/lib/pulp is mounted on Automation Hub servers?
              ansible.builtin.debug:
                msg: "/var/lib/pulp is mounted: {{ nfsmount_set }}"
              when:
                - hub_clustered
                - inventory_hostname in groups['automationhub']

            - name: Show automationhub_main_url if Clustered Automation Hub
              ansible.builtin.debug:
                msg: "Automation Hub main URL: {{ automationhub_main_url }}"
              run_once: true
              when:
                - hub_clustered

    - name: Display EDA Controller test results
      when:
        - inventory_hostname in groups['automationedacontroller']
      block:
        - name: Display EDA connection result
          ansible.builtin.debug:
            var: eda_db_connection['stderr']

        - name: Display AAP installed EDA db test results
          when: groups['database'] | lenght > 0
          ansible.builtin.debug:
            msg: >-
              {{ eda_check_pg_vars if eda_check_pg_vars is defined
                else
                "All automationedacontroller_pg_ vars were set properly"
          run_once: true
...
