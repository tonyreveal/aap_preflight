---
- name: AAP Install pre-flight checks
  hosts: all
  gather_facts: false
  vars:
    pkgs:
      - 'nmap-ncat'
    disable_repos:
      - 'rhel-9-for-x86_64-appstream-rpms'
    enable_repos:
      - 'rhel-9-for-x86_64-baseos-rpms'
  tasks:
    - name: Pre-flight tasks for all hosts in inventory
      become: true
      block:
        - name: Install nc for connectivity tests before disabling repos
          ansible.builtin.dnf:
            name: "{{ pkgs }}"
            state: 'present'
          when: >-
            inventory_hostname in groups['automationcontroller'] or
            inventory_hostname in groups['automationhub'] or
            inventory_hostname in groups['automationedacontroller'] or
            inventory_hostname in groups['execution_nodes'] and
            hostvars[inventory_hostname]['node_type'] == 'hop'

        - name: Make sure repos are disabled
          redhat.rhel_system_roles.rhsm_repository:
            name: "{{ disable_repos }}"
        
        - name: Make sure the Base OS repo is enabled
          redhat.rhel_system_roles.rhsm_repository:
            name: "{{ enable_repos }}"

        - name: Get service facts
          ansible.builtin.service_facts:

        - name: Stop and disable the chef-client if present
          ansible.builtin.service:
            name: chef-client
            state: stopped
            enabled: false
          when: 'chef-client' in services

    - name: Perform non-aap installer managed database connectivity tests
      when: groups['database'] | length == 0
      block: 
        - name: Automation Controller Database Tests
          when: inventory_hostname in groups['automationcontroller']
          block:
            - name: Verify Contoller connectivity to AAP DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ pg_host }} {{ pg_port }}"
              register: aap_db_connection
              ignore_errors: true
    
            - name: Display Controller connection result
              ansible.builtin.debug:
                var: aap_db_connection['stderr']
    
            - name: Verify AAP database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ pg_database }}"
                login_host: "{{ pg_host }}"
                login_user: "{{ pg_username }}"
                login_password: "{{ pg_password }}"
                port: "{{ pg_port }}"
                ssl_mode: "{{ pg_sslmode }}"
              register: aap_pgsql_test
              ignore_errors: true
    
            - name: Display Controller db credential test results
              ansible.builtin.debug:
                var: aap_pgsql_test

        - name: Automation Hub database Tests
          when: inventory_hostname in groups['automationhub']
          block:
            - name: Verify Hub connectivity to Hub DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ automationhub_pg_host }} {{ automationhub_pg_port }}"
              register: hub_db_connection
              ignore_errors: true
    
            - name: Display HUB connection result
              ansible.builtin.debug:
                var: hub_db_connection['stderr']
    
            - name: Verify HUB database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ automationhub_pg_database }}"
                login_host: "{{ automationhub_pg_host }}"
                login_user: "{{ automationhub_pg_username }}"
                login_password: "{{ automationhub_pg_password }}"
                port: "{{ automationhub_pg_port }}"
                ssl_mode: "{{ automationhub_pg_sslmode }}"
              register: hub_pgsql_test
              ignore_errors: true
    
            - name: Display HUB db credential test results
              ansible.builtin.debug:
                var: hub_pgsql_test

            - name: Make sure the hstore extension is enabled for Automation Hub
              community.postgresql.postgresql_ext:
                name: 'hstore'
                db: "{{ automationhub_pg_host }}"
                login_host: "{{ automationhub_pg_host }}"
                login_user: "{{ automationhub_pg_username }}"
                login_password: "{{ automationhub_pg_password }}"
                port: "{{ automationhub_pg_port }}"
                ssl_mode: "{{ automationhub_pg_sslmode }}"
                state: 'present'
                register: hstore_install
                ignore_errors: true
                # enabling hstore requires postgresql-contrib to be installed
                # on the database server.  if it's not installed this task will fail.
                # We want to ignore the failure and continue with the remainder of the tasks.
                # Since it's not an AAP installation managed database we cannot manage the host
                # to install the required package.

        - name: EDA Controller Database Tests
          when: inventory_hostname in groups['automationedacontroller']
          block:
            - name: Verify EDA connectivity to EDA DB server / port
              ansible.builtin.command:
                cmd: "nc -zv {{ automationedacontroller_pg_host }} {{ automationedacontroller_pg_port }}"
              register: eda_db_connection
              ignore_errors: true
    
            - name: Display EDA connection result
              ansible.builtin.debug:
                var: eda_db_connection['stderr']
    
            - name: Verify EDA database credentials by trying to connect to db
              community.postgresql.postgresql_ping:
                db: "{{ automationedacontroller_pg_database }}"
                login_host: "{{ automationedacontroller_pg_host }}"
                login_user: "{{ automationedacontroller_pg_username }}"
                login_password: "{{ automationedacontroller_pg_password }}"
                port: "{{ automationedacontroller_pg_port }}"
                ssl_mode: "{{ automationedacontroller_pg_sslmode }}"
              register: eda_pgsql_test
              ignore_errors: true
    
            - name: Display EDA db credential test results
              ansible.builtin.debug:
                var: eda_pgsql_test

    - name: Additional Automation Hub tests
      when: inventory_hostname in groups['automationhub']
      block:
        - name: Check number of Automation Hub nodes in inventory
          ansible.builtin.set_fact:
            hub_clustered: true
          when: groups'[automationhub'] | length > 1
        
        - name: Perform clustered Automation Hub tasks
          when: hub_clustered | default(false)
          block:
            - name: Gather facts about Automation Hub servers
              ansible.builtin.setup:
            
            - name: Check for shared mount on clustered Automation Hub
              ansible.builtin.set_fact:
                nfsmount_set: >-
                  {{ true if ansible_mounts | selectattr('mount', 'defined') |
                    selectattr('fstype', 'equalto', 'nfs') |
                    selectattr('mount', 'equalto', '/var/lib/pulp') | length == 1
                    else
                    false
                  }}

            - name: /var/lib/pulp is mounted on Automation Hub servers?
              ansible.builtin.debug:
                msg: "/var/lib/pulp is mounted: {{ nfsmount_set }}"
            
            - name: Should show a value here for automationhub_main_url if a clustered install
              ansible.builtin.debug:
                msg: "Automation Hub main URL: {{ automationhub_main_url }}"

    - name: Verify Hop node Receptor connectivity (port 27199)
      when:
        - inventory_hostname in groups['execution_nodes']
        - hostvars[inventory_hostname]['node_type'] == 'hop'
      block:
        - name: Gather package facts
          ansible.builtin.package_facts:
        
        - name: Check if Receptor is installed
          ansible.builtin.set_fact:
            receptor_present: >-
              {{ true if packages | selectattr('name', 'defined') |
                selectattr('name', 'equalto', 'receptor.x86_64') | length == 1
                else
                false
              }}

        - name: Check if receptor service is running
          ansible.builtin.set_fact:
            receptor_svc_running: >-
              {{ true if services | selectattr('name', 'defined') |
                selectattr('name', 'contains', 'receptor') | length == 1 |
                selectattr('state', 'equalto', 'running')
                else
                false
              }}

        - name: Verify Hop node receptor connectivity to Controllers
          ansible.builtin.command:
            cmd: "nc -zv {{ control_node }} {{ receptor_listener_port }}"
          register: receptor_connection
          ignore_errors: true
          loop: "{{ groups['automationcontroller'] }}"
          loop_control:
            loop_var: control_node
          when:
            - receptor_present
            - receptor_svc_running
 
        - name: Display Hop node receptor connectivity results
          ansible.builtin.debug:
            var: receptor_connection['results'] | selectattr('stderr', 'defined') | map(attribute='stderr') | list
          when: receptor_connection is defined
...
